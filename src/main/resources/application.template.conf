
development {
  genome_diver {
    data_directory       = "<data directory>"
    exomiser_directory   = "<exomiser directory>"
    pipeline_manager_dir = "<pipeline directory>"
    pipeline_manager_exe = "<nextflow directory>"
    databaseURL          = "jdbc:postgresql://localhost:5432/genome_diver"
    databaseUser         = "diver"
    databasePassword     = "<database password>"
    bSalt                = "<database bcrypt salt>"
    emailKey             = "<email API key>"
    dbPoolMin            = 1
    dbPoolMax            = 4
    dbPoolMinRead        = 2
    dbPoolMaxRead        = 8
  }
}


# Dedicated dispatcher or thread pool governing the scheduler in the
# unlikely event that shelled out processes block as Process.run doesn't
# appear to block. Generally hygenic to dedicate a small fixed pool for
# scheduler to act.
blocking-dispatch {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 4
  }
  throughput = 1
}

# Configurations for akka-http-session module. Specifially JWT headers
# and timeouts
akka.http.session {
  jwt {
    iss = "Genome Diver"
    sub = "Genome Diver Session"
    aud = "Genome Diver [Admistration, Lab, Caregiver] Users"
    exp-timeout = 7 days
    nbf-offset = 5 minutes
    include-iat = true
    include-jti = true
  }
}

# obscure Akka
akka.http.server {
  server.server-header = "http"
}

# CORS is not used on production, only for development
akka-http-cors {

  # If enabled, allow generic requests (that are outside the scope of the specification)
  # to pass through the directive. Else, strict CORS filtering is applied and any
  # invalid request will be rejected.
  allow-generic-http-requests = yes

  # Indicates whether the resource supports user credentials.  If enabled, the header
  # `Access-Control-Allow-Credentials` is set in the response, indicating that the
  # actual request can include user credentials. Examples of user credentials are:
  # cookies, HTTP authentication or client-side certificates.
  allow-credentials = yes

  # List of origins that the CORS filter must allow. Can also be set to `*` to allow
  # access to the resource from any origin. Controls the content of the
  # `Access-Control-Allow-Origin` response header: if parameter is `*` and credentials
  # are not allowed, a `*` is set in `Access-Control-Allow-Origin`. Otherwise, the
  # origins given in the `Origin` request header are echoed.
  #
  # Hostname starting with `*.` will match any sub-domain.
  # The scheme and the port are always strictly matched.
  #
  # The actual or preflight request is rejected if any of the origins from the request
  # is not allowed.
  allowed-origins = "*"

  # List of request headers that can be used when making an actual request. Controls
  # the content of the `Access-Control-Allow-Headers` header in a preflight response:
  # if parameter is `*`, the headers from `Access-Control-Request-Headers` are echoed.
  # Otherwise the parameter list is returned as part of the header.
  allowed-headers = "*"

  # List of methods that can be used when making an actual request. The list is
  # returned as part of the `Access-Control-Allow-Methods` preflight response header.
  #
  # The preflight request will be rejected if the `Access-Control-Request-Method`
  # header's method is not part of the list.
  allowed-methods = ["GET", "POST", "HEAD", "OPTIONS", "PUT"]

  # List of headers (other than simple response headers) that browsers are allowed to access.
  # If not empty, this list is returned as part of the `Access-Control-Expose-Headers`
  # header in the actual response.
  exposed-headers = ["Set-Authorization", "Authorization", "Set-Refresh-Token"]

  # When set, the amount of seconds the browser is allowed to cache the results of a preflight request.
  # This value is returned as part of the `Access-Control-Max-Age` preflight response header.
  # If `null`, the header is not added to the preflight response.
  max-age = 1800 seconds
}